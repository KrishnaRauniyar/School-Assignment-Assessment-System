{"ast":null,"code":"'use strict';\n\nvar AWS = require('aws-sdk');\n\nvar ses = new AWS.SES();\n\nvar path = require('path'); // -> resolve template files\n\n\nvar fs = require('fs'); // -> open template files\n\n\nvar Handlebars = require('handlebars'); // -> compile templates\n\n\nvar COMPILED_TEMPLATES = {}; // -> cache compiled templates\n\nAWS.config.region = process.env.AWS_REGION;\n/**\n * set_template_directory does exactly what its name suggests\n * @param {String} dir - the template directory\n * @returns {undefined}\n */\n\nfunction set_template_directory(dir) {\n  if (!dir) {\n    throw new Error('Please Set a Template Directory');\n  }\n\n  fs.readdirSync(dir); // this should be sync (on startup)\n\n  process.env.TEMPLATE_DIRECTORY = dir; // set the env var\n}\n\nset_template_directory(process.env.TEMPLATE_DIRECTORY);\n/**\n * open template file sync (ONCE) and compile it!\n * @param {String} template_name - filename of template\n * @param {String} type          - the file type\n * @returns {Object}             - compiled templates\n */\n\nfunction compile_template(template_name, type) {\n  var filename = template_name + '.' + type;\n  var template_cached = COMPILED_TEMPLATES[template_name + '.' + type];\n  var compiled, template, filepath; // check if the template has already been opened\n\n  if (!template_cached) {\n    filepath = path.resolve(process.env.TEMPLATE_DIRECTORY, filename);\n    template = fs.readFileSync(filepath, 'utf8');\n    compiled = Handlebars.compile(template);\n    COMPILED_TEMPLATES[template_name + '.' + type] = compiled;\n  }\n\n  return COMPILED_TEMPLATES[template_name + '.' + type];\n}\n\nfunction isTruthy(x) {\n  return Boolean(x);\n}\n\nfunction destinationParams(options) {\n  // see: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html\n  var toAddresses = options.toAddresses || [];\n  var ccAddresses = options.ccAddresses || [];\n  var bccAddresses = options.bccAddresses || [];\n  toAddresses = toAddresses.filter(isTruthy);\n  ccAddresses = ccAddresses.filter(isTruthy);\n  bccAddresses = bccAddresses.filter(isTruthy);\n  return {\n    /* required */\n    BccAddresses: bccAddresses,\n    CcAddresses: ccAddresses,\n    ToAddresses: toAddresses\n  };\n}\n\nfunction messageParams(options) {\n  var defaultCharset = 'utf8';\n  return {\n    /* required */\n    Body: {\n      /* required */\n      Html: {\n        Data: compile_template(options.templateName, 'html')(options.context),\n\n        /* required */\n        Charset: options.htmlCharset || defaultCharset\n      },\n      Text: {\n        Data: compile_template(options.templateName, 'txt')(options.context),\n\n        /* required */\n        Charset: options.textCharset || defaultCharset\n      }\n    },\n    Subject: {\n      /* required */\n      Data: options.subject,\n\n      /* required */\n      Charset: options.subjectCharset || defaultCharset\n    }\n  };\n}\n/**\n * sendMany function is similar to sendemail but allows more control\n * of params including multiple recipients and CC and BCC recipients\n *\n * @param {Object} options\n   * @param {String[]} options.toAddresses - recipient emails addresses\n   * @param {String[]} [options.ccAddresses] - cc recipient email addresses\n   * @param {String[]} [options.bccAddresses] - bcc recipient email addresses\n   * @param {Object} options.context - The key value pairs\n   * that will be interpolated in the template\n   * @param {String} [options.senderEmailAddress] - Specifies the sender\n   * email address,defaults to SENDER_EMAIL_ADDRESS environment variable\n   * @param {String} [options.replyToAddress] - Specifies the reply to\n   * email address, defaults to SENDER_EMAIL_ADDRESS environment variable\n   * @param {String} [options.htmlCharset] - charset for html email body\n   * @param {String} [options.textCharset] - charset for text email body\n   * @param {String} [options.subjectCharset] - charset for email subject\n * @param {Function} callback - continuation function called after\n * the email has been sent. */\n\n\nfunction sendMany(options, callback) {\n  var params;\n  params = {\n    Destination: destinationParams(options),\n    Message: messageParams(options),\n    Source: options.senderEmailAddress || process.env.SENDER_EMAIL_ADDRESS,\n\n    /* required */\n    ReplyToAddresses: [options.replyToAddress || process.env.SENDER_EMAIL_ADDRESS]\n  };\n  ses.sendEmail(params, callback);\n}\n/**\n * sendemail method takes a template name and person object and uses\n * AWS SES to send the desired email.\n * @param {String} template_name - the template to use for the email\n * @param {Object} person - the object containing the details of the\n * person to whom we want to send the email. Requires both name\n * and email. if you don't *know* the name of the person, leave it\n * an empty string.\n * @param {Function} callback - continuation function called after\n * the email has been sent.\n * @returns {undefined}\n */\n\n\nfunction sendemail(template_name, person, callback) {\n  var options = {\n    templateName: template_name,\n    context: person,\n    subject: person.subject,\n    toAddresses: Array.isArray(person.email) ? person.email : [person.email],\n    senderEmailAddress: person.senderEmailAddress,\n    replyToAddress: person.replyToAddress,\n    ccAddresses: null,\n    bccAddresses: null\n  };\n  sendMany(options, callback);\n}\n\nmodule.exports.email = sendemail;\nmodule.exports.sendMany = sendMany;\nmodule.exports.compile_template = compile_template;\nmodule.exports.set_template_directory = set_template_directory;","map":{"version":3,"sources":["D:/Insight_workshop/Django_React_project/final project(React)/final-project-react/node_modules/sendemail/lib/index.js"],"names":["AWS","require","ses","SES","path","fs","Handlebars","COMPILED_TEMPLATES","config","region","process","env","AWS_REGION","set_template_directory","dir","Error","readdirSync","TEMPLATE_DIRECTORY","compile_template","template_name","type","filename","template_cached","compiled","template","filepath","resolve","readFileSync","compile","isTruthy","x","Boolean","destinationParams","options","toAddresses","ccAddresses","bccAddresses","filter","BccAddresses","CcAddresses","ToAddresses","messageParams","defaultCharset","Body","Html","Data","templateName","context","Charset","htmlCharset","Text","textCharset","Subject","subject","subjectCharset","sendMany","callback","params","Destination","Message","Source","senderEmailAddress","SENDER_EMAIL_ADDRESS","ReplyToAddresses","replyToAddress","sendEmail","sendemail","person","Array","isArray","email","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar AWS = require('aws-sdk');\nvar ses = new AWS.SES();\nvar path = require('path');             // -> resolve template files\nvar fs = require('fs');                 // -> open template files\nvar Handlebars = require('handlebars'); // -> compile templates\nvar COMPILED_TEMPLATES = {};            // -> cache compiled templates\n\nAWS.config.region = process.env.AWS_REGION;\n\n/**\n * set_template_directory does exactly what its name suggests\n * @param {String} dir - the template directory\n * @returns {undefined}\n */\nfunction set_template_directory (dir) {\n  if (!dir) {\n    throw new Error('Please Set a Template Directory');\n  }\n  fs.readdirSync(dir);                  // this should be sync (on startup)\n\n  process.env.TEMPLATE_DIRECTORY = dir; // set the env var\n}\nset_template_directory(process.env.TEMPLATE_DIRECTORY);\n\n/**\n * open template file sync (ONCE) and compile it!\n * @param {String} template_name - filename of template\n * @param {String} type          - the file type\n * @returns {Object}             - compiled templates\n */\nfunction compile_template (template_name, type) {\n  var filename = template_name + '.' + type;\n  var template_cached = COMPILED_TEMPLATES[template_name + '.' + type];\n  var compiled, template, filepath;\n\n  // check if the template has already been opened\n  if (!template_cached) {\n    filepath = path.resolve(process.env.TEMPLATE_DIRECTORY, filename);\n    template = fs.readFileSync(filepath, 'utf8');\n    compiled = Handlebars.compile(template);\n    COMPILED_TEMPLATES[template_name + '.' + type] = compiled;\n  }\n\n  return COMPILED_TEMPLATES[template_name + '.' + type];\n}\n\nfunction isTruthy (x) {\n  return Boolean(x);\n}\n\nfunction destinationParams (options) {\n  // see: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html\n  var toAddresses = options.toAddresses || [];\n  var ccAddresses = options.ccAddresses || [];\n  var bccAddresses = options.bccAddresses || [];\n\n  toAddresses = toAddresses.filter(isTruthy);\n  ccAddresses = ccAddresses.filter(isTruthy);\n  bccAddresses = bccAddresses.filter(isTruthy);\n\n  return { /* required */\n    BccAddresses: bccAddresses,\n    CcAddresses: ccAddresses,\n    ToAddresses: toAddresses\n  };\n}\n\nfunction messageParams (options) {\n  var defaultCharset = 'utf8';\n\n  return {\n    /* required */\n    Body: {\n      /* required */\n      Html: {\n        Data: compile_template(options.templateName, 'html')(options.context),\n        /* required */\n        Charset: options.htmlCharset || defaultCharset\n      },\n      Text: {\n        Data: compile_template(options.templateName, 'txt')(options.context),\n        /* required */\n        Charset: options.textCharset || defaultCharset\n      }\n    },\n    Subject: {\n      /* required */\n      Data: options.subject,\n      /* required */\n      Charset: options.subjectCharset || defaultCharset\n    }\n  };\n}\n\n/**\n * sendMany function is similar to sendemail but allows more control\n * of params including multiple recipients and CC and BCC recipients\n *\n * @param {Object} options\n   * @param {String[]} options.toAddresses - recipient emails addresses\n   * @param {String[]} [options.ccAddresses] - cc recipient email addresses\n   * @param {String[]} [options.bccAddresses] - bcc recipient email addresses\n   * @param {Object} options.context - The key value pairs\n   * that will be interpolated in the template\n   * @param {String} [options.senderEmailAddress] - Specifies the sender\n   * email address,defaults to SENDER_EMAIL_ADDRESS environment variable\n   * @param {String} [options.replyToAddress] - Specifies the reply to\n   * email address, defaults to SENDER_EMAIL_ADDRESS environment variable\n   * @param {String} [options.htmlCharset] - charset for html email body\n   * @param {String} [options.textCharset] - charset for text email body\n   * @param {String} [options.subjectCharset] - charset for email subject\n * @param {Function} callback - continuation function called after\n * the email has been sent. */\n\nfunction sendMany (options, callback) {\n  var params;\n\n  params = {\n    Destination: destinationParams(options),\n    Message: messageParams(options),\n    Source: options.senderEmailAddress || process.env.SENDER_EMAIL_ADDRESS, /* required */\n    ReplyToAddresses: [\n      options.replyToAddress || process.env.SENDER_EMAIL_ADDRESS\n    ]\n  };\n\n  ses.sendEmail(params, callback);\n}\n\n/**\n * sendemail method takes a template name and person object and uses\n * AWS SES to send the desired email.\n * @param {String} template_name - the template to use for the email\n * @param {Object} person - the object containing the details of the\n * person to whom we want to send the email. Requires both name\n * and email. if you don't *know* the name of the person, leave it\n * an empty string.\n * @param {Function} callback - continuation function called after\n * the email has been sent.\n * @returns {undefined}\n */\nfunction sendemail (template_name, person, callback) {\n  var options = {\n    templateName: template_name,\n    context: person,\n    subject: person.subject,\n    toAddresses: Array.isArray(person.email) ? person.email : [person.email],\n    senderEmailAddress: person.senderEmailAddress,\n    replyToAddress: person.replyToAddress,\n    ccAddresses: null,\n    bccAddresses: null\n  };\n\n  sendMany(options, callback);\n}\n\n\nmodule.exports.email = sendemail;\nmodule.exports.sendMany = sendMany;\nmodule.exports.compile_template = compile_template;\nmodule.exports.set_template_directory = set_template_directory;\n"]},"metadata":{},"sourceType":"script"}